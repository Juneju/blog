<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="/blog/" rel="alternate" type="text/html" /><updated>2022-03-13T09:36:15+00:00</updated><id>/blog/feed.xml</id><title type="html">June’s blog</title><subtitle>Hat man sein Warum des Lebens, so verträgt man sich fast mit jedem Wie.</subtitle><author><name>June</name></author><entry><title type="html">读书笔记：数据密集型应用系统设计 - 数据系统基础</title><link href="/blog/posts/notes/2022/03/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80.html" rel="alternate" type="text/html" title="读书笔记：数据密集型应用系统设计 - 数据系统基础" /><published>2022-03-12T10:05:18+00:00</published><updated>2022-03-12T10:05:18+00:00</updated><id>/blog/posts/notes/2022/03/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0:%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%20-%20%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80</id><content type="html" xml:base="/blog/posts/notes/2022/03/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80.html">&lt;h2 id=&quot;可靠可扩展与可维护的应用系统&quot;&gt;可靠、可扩展与可维护的应用系统&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;核心设计目标：可靠、可扩展与可维护的数据系统（data-intensive applications）。&lt;/p&gt;

&lt;h3 id=&quot;可靠性&quot;&gt;可靠性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;硬件故障&lt;/p&gt;

    &lt;p&gt;大多数情况下采用硬件冗余方案是足够的。但是，当应用可以运行在大规模机器上时，硬件故障率呈线性增长。因此，软件容错的方式成了硬件容错的有力补充。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;软件错误&lt;/p&gt;

    &lt;p&gt;比起硬件故障，软件故障事先更加难以预料。只能仔细考虑很多细节，包括认真检查依赖的假设条件与系统之间交互，进行全面的测试，进程隔离，允许进程崩溃并自动重启，反复评估，监控井分析生产环节的行为表现等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;人为失误&lt;/p&gt;

    &lt;p&gt;如果我们假定人是不可靠的，那么该如何保证系统的可靠性呢？可以尝试结合以下多种方位：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;以最小出错的方式来设计系统。例如，精心设计的抽象层、API 以及管理界面，使“做正确的事情”很轻松，但搞坏很复杂。但是，如果限制过多，人们就会想法来绕过它，这会抵消其正面作用。因此解决之道在于很好的平衡。&lt;/li&gt;
      &lt;li&gt;想办法分离最容易出错的地方、容易引发故障的接口。特别是，提供一个功能齐全但非生产用的沙箱环境，使人们可以放心的尝试、体验，包括导入真实的数据，万一出现问题，不会影响真实用户。&lt;/li&gt;
      &lt;li&gt;充分的测试：从各单元测试到全系统集成测试以及手动测试。自动化测试已被广泛使用，对于覆盖正常操作中很少出现的边界条件等尤为重要。&lt;/li&gt;
      &lt;li&gt;当出现人为失误时，提供快速的恢复机制以尽量减少故障影响。例如，快速回滚配置改动，滚动发布新代码（这样任何意外的错误仅会影响一小部分用户），并提供校验数据的工具（防止旧的计算方式不正确）。&lt;/li&gt;
      &lt;li&gt;设置详细而清晰的监控子系统，包括性能指标和错误率。在其他行业称为遥测， 一旦火箭离开地面，遥测对于跟踪运行和了解故障至关重要。监控可以向我们发送告警信号，井检查是否存在假设不成立或违反约束条件等。这些检测指标对于诊断问题也非常有用。&lt;/li&gt;
      &lt;li&gt;推行管理流程井加以培训。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;可扩展性&quot;&gt;可扩展性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;负载&lt;/p&gt;

    &lt;p&gt;负载：用负载参数来描述。参数的最佳选择取决于系统的体系结构，如web服务器中的每秒请求处理次数，数据库写入的比例，缓存命中率等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;性能&lt;/p&gt;

    &lt;p&gt;在批处理系统中，我们通常关心吞吐量（throughput），即每秒可处理的记录数，或者在某指定数据集上运行作业所需的总时间。在线系统，通常看中服务器的响应时间（response time）。&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;延迟与响应时间&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;延迟：处理请求时间（service time）&lt;/li&gt;
        &lt;li&gt;响应时间：处理请求时间+网络延迟+排队延迟&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;对于响应时间，通常是考察平均响应时间，但是最好使用百分位数（多少用户需要等待多长时间）。&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;百分位数
如中位数指标（p50）描述一半用户的等待时间少于中位数响应时间，另一半多于该时间。
为了弄清楚异常值有多糟糕，需要关注更大的百分位数（p95, p99, p99.9）值【尾部延迟】。
排队延迟往往在高百分数响应时间中影响很大。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;应对负载增加的方法&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;垂直扩展 ：升级到更强大的机器&lt;/li&gt;
      &lt;li&gt;水平扩展：将负载分散到多个更小的机器&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;现在谈论更多的是如何在垂直扩展和水平扩展之间做取舍。取舍因素包括数据读取量、写入量、待存储的数据量、数据的复杂度、响应时间要求、访问模式等。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;可维护性&quot;&gt;可维护性&lt;/h3&gt;

&lt;p&gt;众所周知，软件的大部分成本并不在最初的开发阶段，而是在于整个生命周期内持续的投入，这包括维护与缺陷修复，监控系统来保持正常运行、故障排查、适配新平台、搭配新场景、技术缺陷的完善以及增加新功能等。&lt;/p&gt;

&lt;p&gt;为尽可能减少维护期间的麻烦，在软件设计的时候要特别关注软件系统等三个设计原则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;可运维性&lt;/p&gt;

    &lt;p&gt;良好的可操作性意味着使日常工作变得简单，使运营团队能够专注于高附加值的任务。数据系统设计可以在这方面贡献很多， 包括：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;提供对系统运行时行为和内部的可观测性，方便监控。&lt;/li&gt;
      &lt;li&gt;支持自动化， 与标准工具集成。&lt;/li&gt;
      &lt;li&gt;避免绑定特定的机器，这样在整个系统不间断运行的同时，允许机器停机维护。&lt;/li&gt;
      &lt;li&gt;提供良好的文档和易于理解的操作模式，诸如“如果我做了X ，会发生Y ”。&lt;/li&gt;
      &lt;li&gt;提供良好的默认配置，且允许管理员在需要时方便地修改默认值。&lt;/li&gt;
      &lt;li&gt;尝试自我修复，在需要时让管理员手动控制系统状态。&lt;/li&gt;
      &lt;li&gt;行为可预测，减少意外发生。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;简单性&lt;/p&gt;

    &lt;p&gt;复杂性有各种各样的表现方式： 状态空间的膨胀，模块紧耦合，令人纠结的相互依赖关系， 不一致的命名和术语，为了性能而采取的特殊处理，为解决某特定问题而引入的特殊框架等。&lt;/p&gt;

    &lt;p&gt;降低复杂性可以大大提高软件的可维护性，因此简单性应该是我们构建系统的关键目标之一。&lt;/p&gt;

    &lt;p&gt;消除意外复杂性最好手段之一是抽象。一个好的设计抽象可以隐藏大量的实现细节，并对外提供干净、易懂的接口。一个好的设计抽象可用于各种不同的应用程序。这样，复用远比多次重复实现更有效率；另一方面，也带来更高质量的软件，而质量过硬的抽象组件所带来的好处，可以使运行其上的所有应用轻松获益。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可演化性&lt;/p&gt;

    &lt;p&gt;在组织、流程方面，敏捷开发模式为适应变化提供了很好的参考。敏捷社区还发布了很多技术工具和模式，以帮助在频繁变化的环境中开发软件，例如测试驱动开发(TDD）和重构。&lt;/p&gt;

    &lt;p&gt;我们的目标是可以轻松地修改数据系统，使其适应不断变化的需求，这和简单性与抽象性密切相关： 简单易懂的系统往往比复杂的系统更容易修改。这是一个非常重要的理念，我们将采用另一个不同的词来指代数据系统级的敏捷性， 即可演化性。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>June</name></author><category term="posts" /><category term="notes" /><summary type="html">可靠、可扩展与可维护的应用系统</summary></entry><entry><title type="html">博客搭建：Jekyll + Github</title><link href="/blog/posts/jekyll/2021/02/23/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-Jekyll-+-Github.html" rel="alternate" type="text/html" title="博客搭建：Jekyll + Github" /><published>2021-02-23T10:05:18+00:00</published><updated>2021-02-23T10:05:18+00:00</updated><id>/blog/posts/jekyll/2021/02/23/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA:Jekyll-+-Github</id><content type="html" xml:base="/blog/posts/jekyll/2021/02/23/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-Jekyll-+-Github.html">&lt;h2 id=&quot;jekyll&quot;&gt;Jekyll&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Jekyll 是静态网站生成工具。Github Pages可以免费部署Jekyll生成的网站。&lt;/p&gt;

&lt;p&gt;本博客是在jekyll minima theme的基础上改造页面样式，增加一些功能点。所以需要在本地环境安装调试Jekyll项目。&lt;/p&gt;

&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;

&lt;h4 id=&quot;依赖环境&quot;&gt;依赖环境&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby version 2.4.0 or higher&lt;/li&gt;
  &lt;li&gt;RubyGems&lt;/li&gt;
  &lt;li&gt;GCC and Make&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;gem-安装包&quot;&gt;gem 安装包&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyll bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;创建项目&quot;&gt;创建项目&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll new blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;启动项目&quot;&gt;启动项目&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;span class=&quot;c&quot;&gt;#配置启动端口&lt;/span&gt;
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve &lt;span class=&quot;nt&quot;&gt;--port&lt;/span&gt; PORT
&lt;span class=&quot;c&quot;&gt;#配置启动主机&lt;/span&gt;
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve &lt;span class=&quot;nt&quot;&gt;--host&lt;/span&gt; HOSTNAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;访问项目&quot;&gt;访问项目&lt;/h4&gt;

&lt;p&gt;本地项目默认地址是：http://localhost:4000&lt;/p&gt;

&lt;p&gt;注：默认ruby gems配置的地址有时候下载速度比较慢，可以改用镜像：https://mirrors.tuna.tsinghua.edu.cn/rubygems/&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;项目结构&quot;&gt;项目结构&lt;/h3&gt;

&lt;h4 id=&quot;默认主题minima路径&quot;&gt;默认主题minima路径&lt;/h4&gt;

&lt;p&gt;在项目下(Gemfile所在路径)运行：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle info &lt;span class=&quot;nt&quot;&gt;--path&lt;/span&gt; minima
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;主题结构&quot;&gt;主题结构&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├─assets
├─_includes
├─_layouts
└─_sass 1. _layouts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;存放页面布局文件。其他文件通过frontMatter声明来使用对应的布局文件。如果需要自定义布局，可以将文件放在此目录下。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   ├── default.html：所有layouts的基础，通过和 frontMatter声明（layout:default）
   ├── home.html ：index.md或index.html的html布局
   ├── page.html ：除了posts，其余包含frontMatter:page的布局
   └── post.html : 发布的文章的页面布局
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;_includes&lt;/p&gt;

    &lt;p&gt;存放能够被_layouts注入的文件。&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├── footer.html
├── google-analytics.html
├── head.html
├── header.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;注入方式：&lt;/p&gt;
    &lt;div class=&quot;language-django highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;header.html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;_sass&lt;/p&gt;

    &lt;p&gt;存放样式.scss文件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;assets&lt;/p&gt;

    &lt;p&gt;存放资源文件。main.scss在此文件夹中，在_layouts/default.html 通过 _includes/head.html中引入。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;项目结构-1&quot;&gt;项目结构&lt;/h4&gt;

&lt;p&gt;除了包含上述的主题结构外，还有以下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├─_site
├─_posts
├─_plugins
├─_config.yml
└─...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;_site&lt;/p&gt;

    &lt;p&gt;项目运行之后，生成的静态网页。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;_posts&lt;/p&gt;

    &lt;p&gt;需要发布的文章在这里面。&lt;/p&gt;

    &lt;p&gt;Jekyll规定了post文件命名的格式如下：&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;YEAR-MONTH-DAY-title.MARKUP
​	YEAR：年份，四位数字   
​	MONTH：月份，二位数字  
​	DAY：天，二位数字  
​	MARKUP：文件格式，如md  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;如果想要给文章添加category，其中一种方法是可以通过文件夹的名称。如下给文章&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql.md&lt;/code&gt;添加了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;database&lt;/code&gt;的分类：&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├─posts
	├─database
		├─_posts
			├─mysql.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;_plugins&lt;/p&gt;

    &lt;p&gt;用ruby语言编写的插件。具体参考：https://jekyllrb.com/docs/plugins/your-first-plugin/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;_config.yml&lt;/p&gt;

    &lt;p&gt;配置文件存放项目的全局配置，这些配置很少被修改。对于经常需要改变的变量，使用data files。&lt;/p&gt;

    &lt;p&gt;在Liquid模板中可以通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{ site.xxx }}&lt;/code&gt;来获取对应的值。&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;front-matter&quot;&gt;Front Matter&lt;/h3&gt;

&lt;p&gt;Front Matter 是在文件开头，介于三段虚线之间的YAML片段。&lt;/p&gt;

&lt;p&gt;例子：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;标题&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;layout 用于页面嵌入布局中（通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{content}}&lt;/code&gt; ）。&lt;/p&gt;

  &lt;p&gt;title是页面定义的变量，可以在该页面的Liquid模板中通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{ page.title }}&lt;/code&gt;使用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;jekyll-liquid&quot;&gt;Jekyll Liquid&lt;/h3&gt;

&lt;p&gt;Jekyll 使用 &lt;a href=&quot;https://shopify.github.io/liquid/&quot;&gt;Liquid&lt;/a&gt; 模板语言处理模板。&lt;/p&gt;

&lt;p&gt;语言基本上和一般模板语言相同，如变量取值&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{ object }}&lt;/code&gt;  , 条件判断&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{% if condition %} {% endif %}  &lt;/code&gt; 等等。具体可以参考官方文档。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;github-部署&quot;&gt;GitHub 部署&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;用GitHub pages部署Jekyll，需要新建一个仓库，然后在仓库的settings中配置GitHub Pages。具体的操作可以参考网上的教程。&lt;/p&gt;

&lt;p&gt;想特别提到的一点是：如果使用了自己编写的插件，上传到了_plugins文件夹下，但是部署到线上环境会不生效。原因是Github自动部署的保护机制。所以如果想部署上去，就需要使用Github Actions。具体可以参考：https://jekyllrb.com/docs/continuous-integration/github-actions/#workspace-setup&lt;/p&gt;

&lt;p&gt;下面放一下本项目配置的gh-pages.yml：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build and deploy Jekyll site to GitHub Pages&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;github-pages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;helaili/jekyll-action@2.0.5&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;JEKYLL_PAT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.JEKYLL_PAT }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;https://jekyllrb.com/docs/&lt;/p&gt;

&lt;p&gt;https://jekyllrb.com/docs/continuous-integration/github-actions/&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;这篇博客的搭建主要耗时不到一个月，抽出了几天，这几天抽出了几个小时，实际耗时比较短，所以总体搭建下来感觉还是挺简单的。如果不修改Jekyll默认主题，可能只需要几个小时。&lt;/p&gt;

&lt;p&gt;最后，既然自己已经搭出来，希望自己能坚持做下去。&lt;/p&gt;</content><author><name>June</name></author><category term="posts" /><category term="jekyll" /><summary type="html">Jekyll</summary></entry></feed>